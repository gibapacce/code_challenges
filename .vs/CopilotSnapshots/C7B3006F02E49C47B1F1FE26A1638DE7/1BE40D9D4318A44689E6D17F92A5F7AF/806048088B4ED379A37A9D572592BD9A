<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fluxogramas de Pensamento Lógico - LeetCode</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: #fdfdfd;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(180, 180, 200, 0.10);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #b7e0f7 0%, #e2d1f9 100%);
            color: #3a3a3a;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(200, 200, 200, 0.15);
        }

        .header p {
            font-size: 1.2rem;
            opacity: 0.85;
        }

        .nav-container {
            padding: 20px;
            background: #f6f6f8;
            border-bottom: 2px solid #e9ecef;
        }

        .problem-nav {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }

        .nav-btn {
            background: #e2eafc;
            color: #3a3a3a;
            border: none;
            padding: 12px 20px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            text-align: left;
            box-shadow: 0 2px 8px rgba(180, 180, 200, 0.08);
        }

        .nav-btn:hover {
            background: #cddafd;
            color: #222;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(180, 180, 200, 0.13);
        }

        .nav-btn.active {
            background: #b7e0f7;
            color: #222;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(183, 224, 247, 0.18);
        }

        .content {
            padding: 30px;
        }

        .flowchart {
            display: none;
        }

        .flowchart.active {
            display: block;
        }

        .flowchart h2 {
            color: #4b4b5c;
            margin-bottom: 25px;
            font-size: 1.8rem;
            text-align: center;
            padding-bottom: 15px;
            border-bottom: 3px solid #b7e0f7;
        }

        .flow-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            margin: 15px 0;
        }

        .flow-step {
            background: #f6f6f8;
            padding: 10px 16px;
            border-radius: 8px;
            box-shadow: 0 2px 6px rgba(180, 180, 200, 0.06);
            border-left: 4px solid #b7e0f7;
            max-width: 420px;
            width: 100%;
            position: relative;
            font-size: 0.97rem;
        }

        .flow-step.start {
            background: #e2f0cb;
            color: #3a3a3a;
            border-left-color: #b5ead7;
        }

        .flow-step.decision {
            background: #ffe5ec;
            color: #7c5e5e;
            border-left-color: #ffc2d1;
            border-radius: 20px;
        }

        .flow-step.process {
            background: #f6eac2;
            color: #3a3a3a;
            border-left-color: #f9f7d9;
        }

        .flow-step.end {
            background: #c7ceea;
            color: #3a3a3a;
            border-left-color: #b7e0f7;
        }

        .flow-step h3 {
            margin-bottom: 4px;
            font-size: 1.05rem;
        }

        .flow-step p {
            line-height: 1.4;
            font-size: 0.97rem;
        }

        .arrow {
            width: 0;
            height: 0;
            border-left: 10px solid transparent;
            border-right: 10px solid transparent;
            border-top: 14px solid #b7e0f7;
            margin: 2px 0 2px 0;
        }

        .complexity {
            background: #e2eafc;
            color: #3a3a3a;
            padding: 20px;
            border-radius: 15px;
            margin-top: 30px;
            text-align: center;
        }

        .complexity h3 {
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

        .complexity-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-top: 15px;
        }

        .complexity-item {
            background: #f6f6f8;
            padding: 15px;
            border-radius: 10px;
        }

        @media (max-width: 768px) {
            .problem-nav {
                grid-template-columns: 1fr;
            }
            
            .complexity-grid {
                grid-template-columns: 1fr;
            }

            .header h1 {
                font-size: 2rem;
            }

            .content {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🧠 Fluxogramas de Pensamento Lógico</h1>
            <p>Visualização do processo de resolução dos problemas LeetCode</p>
        </div>

        <div class="nav-container">
            <div class="problem-nav">
                <button class="nav-btn active" onclick="showFlowchart('palindrome-string')">1. Valid Palindrome (String)</button>
                <button class="nav-btn" onclick="showFlowchart('two-sum')">2. Two Sum</button>
                <button class="nav-btn" onclick="showFlowchart('palindrome-number')">3. Palindrome Number</button>
                <button class="nav-btn" onclick="showFlowchart('missing-number-sum')">4. Missing Number (Soma)</button>
                <button class="nav-btn" onclick="showFlowchart('missing-number-xor')">5. Missing Number (XOR)</button>
                <button class="nav-btn" onclick="showFlowchart('missing-number-sort')">6. Missing Number (Sort)</button>
                <button class="nav-btn" onclick="showFlowchart('merge-sorted')">7. Merge Sorted Array</button>
                <button class="nav-btn" onclick="showFlowchart('max-consecutive')">8. Max Consecutive Ones</button>
                <button class="nav-btn" onclick="showFlowchart('majority-element')">9. Majority Element</button>
                <button class="nav-btn" onclick="showFlowchart('intersection')">10. Intersection of Two Arrays</button>
                <button class="nav-btn" onclick="showFlowchart('first-bad-version')">11. First Bad Version</button>
                <button class="nav-btn" onclick="showFlowchart('fibonacci')">12. Fibonacci (Recursivo)</button>
                <button class="nav-btn" onclick="showFlowchart('contains-duplicate')">13. Contains Duplicate</button>
                <button class="nav-btn" onclick="showFlowchart('climbing-stairs')">14. Climbing Stairs</button>
                <button class="nav-btn" onclick="showFlowchart('binary-search')">15. Binary Search</button>
                <button class="nav-btn" onclick="showFlowchart('stock-profit')">16. Best Time to Buy and Sell Stock</button>
                <button class="nav-btn" onclick="showFlowchart('average-salary')">17. Average Salary Excluding Min and Max</button>
            </div>
        </div>

        <div class="content">
            <!-- 1. Valid Palindrome -->
            <div id="palindrome-string" class="flowchart active">
                <h2>1. Valid Palindrome (String)</h2>
                <!-- SVG Block Diagram for Valid Palindrome with Descriptions -->
                <div style="overflow-x:auto; margin-bottom: 24px;">
                    <svg width="1200" height="180" viewBox="0 0 1200 180">
                        <!-- Block 1: INÍCIO -->
                        <rect x="10" y="30" width="160" height="110" rx="12" fill="#e2f0cb" stroke="#b5ead7" stroke-width="2"/>
                        <text x="90" y="55" text-anchor="middle" font-size="22" font-family="Segoe UI" fill="#3a3a3a">🎯</text>
                        <text x="90" y="78" text-anchor="middle" font-size="14" font-family="Segoe UI" fill="#3a3a3a" font-weight="bold">INÍCIO</text>
                        <foreignObject x="25" y="85" width="150" height="50">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:12px;color:#3a3a3a;text-align:center;line-height:1.3;">Recebo uma string e preciso<br/>verificar se é palíndromo</div>
                        </foreignObject>

                        <!-- Arrow 1 -->
                        <path d="M170,85 Q185,85 200,85" stroke="#b7e0f7" stroke-width="3" fill="none" marker-end="url(#arrowhead)"/>

                        <!-- Block 2: ANÁLISE -->
                        <rect x="200" y="30" width="180" height="110" rx="12" fill="#ffe5ec" stroke="#ffc2d1" stroke-width="2"/>
                        <text x="290" y="55" text-anchor="middle" font-size="22" font-family="Segoe UI" fill="#7c5e5e">🤔</text>
                        <text x="290" y="78" text-anchor="middle" font-size="14" font-family="Segoe UI" fill="#7c5e5e" font-weight="bold">ANÁLISE</text>
                        <foreignObject x="215" y="85" width="150" height="60">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:12px;color:#7c5e5e;text-align:center;line-height:1.3;">Palíndromo = igual de trás pra frente<br/>Ignorar maiúsculas/minúsculas<br/>e caracteres especiais</div>
                        </foreignObject>

                        <!-- Arrow 2 -->
                        <path d="M380,85 Q395,85 410,85" stroke="#b7e0f7" stroke-width="3" fill="none" marker-end="url(#arrowhead)"/>

                        <!-- Block 3: LIMPEZA -->
                        <rect x="410" y="30" width="200" height="110" rx="12" fill="#f6eac2" stroke="#f9f7d9" stroke-width="2"/>
                        <text x="510" y="55" text-anchor="middle" font-size="22" font-family="Segoe UI" fill="#3a3a3a">🧹</text>
                        <text x="510" y="78" text-anchor="middle" font-size="14" font-family="Segoe UI" fill="#3a3a3a" font-weight="bold">LIMPEZA</text>
                        <foreignObject x="425" y="85" width="170" height="60">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:12px;color:#3a3a3a;text-align:center;line-height:1.3;">Remover não-alfanuméricos<br/>com regex e converter para minúsculas</div>
                        </foreignObject>

                        <!-- Arrow 3 -->
                        <path d="M610,85 Q625,85 640,85" stroke="#b7e0f7" stroke-width="3" fill="none" marker-end="url(#arrowhead)"/>

                        <!-- Block 4: REVERSÃO -->
                        <rect x="640" y="30" width="180" height="110" rx="12" fill="#f6eac2" stroke="#f9f7d9" stroke-width="2"/>
                        <text x="730" y="55" text-anchor="middle" font-size="22" font-family="Segoe UI" fill="#3a3a3a">🔄</text>
                        <text x="730" y="78" text-anchor="middle" font-size="14" font-family="Segoe UI" fill="#3a3a3a" font-weight="bold">REVERSÃO</text>
                        <foreignObject x="655" y="85" width="150" height="60">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:12px;color:#3a3a3a;text-align:center;line-height:1.3;">Criar versão invertida<br/>da string limpa</div>
                        </foreignObject>

                        <!-- Arrow 4 -->
                        <path d="M820,85 Q835,85 850,85" stroke="#b7e0f7" stroke-width="3" fill="none" marker-end="url(#arrowhead)"/>

                        <!-- Block 5: COMPARAÇÃO -->
                        <rect x="850" y="30" width="180" height="110" rx="12" fill="#ffe5ec" stroke="#ffc2d1" stroke-width="2"/>
                        <text x="940" y="55" text-anchor="middle" font-size="22" font-family="Segoe UI" fill="#7c5e5e">⚖️</text>
                        <text x="940" y="78" text-anchor="middle" font-size="14" font-family="Segoe UI" fill="#7c5e5e" font-weight="bold">COMPARAÇÃO</text>
                        <foreignObject x="865" y="85" width="150" height="60">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:12px;color:#7c5e5e;text-align:center;line-height:1.3;">Comparar string limpa<br/>com a invertida</div>
                        </foreignObject>

                        <!-- Arrow 5 -->
                        <path d="M1030,85 Q1045,85 1060,85" stroke="#b7e0f7" stroke-width="3" fill="none" marker-end="url(#arrowhead)"/>

                        <!-- Block 6: RESULTADO -->
                        <rect x="1060" y="30" width="130" height="110" rx="12" fill="#c7ceea" stroke="#b7e0f7" stroke-width="2"/>
                        <text x="1125" y="55" text-anchor="middle" font-size="22" font-family="Segoe UI" fill="#3a3a3a">✅</text>
                        <text x="1125" y="78" text-anchor="middle" font-size="14" font-family="Segoe UI" fill="#3a3a3a" font-weight="bold">RESULTADO</text>
                        <foreignObject x="1075" y="85" width="110" height="60">
                            <div xmlns="http://www.w3.org/1999/xhtml" style="font-size:12px;color:#3a3a3a;text-align:center;line-height:1.3;">Se igual: true<br/>Se diferente: false</div>
                        </foreignObject>

                        <!-- Arrowhead marker definition -->
                        <defs>
                            <marker id="arrowhead" markerWidth="8" markerHeight="8" refX="8" refY="4" orient="auto" markerUnits="strokeWidth">
                                <polygon points="0 0, 8 4, 0 8" fill="#b7e0f7" />
                            </marker>
                        </defs>
                    </svg>
                </div>
                <!-- Fim SVG Block Diagram -->
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Recebo uma string e preciso verificar se é palíndromo (igual quando lida de trás pra frente)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 ANÁLISE</h3>
                        <p>O que é um palíndromo? Uma string que lida de trás para frente é igual à original. Mas preciso ignorar maiúsculas/minúsculas e caracteres especiais.</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🧹 LIMPEZA</h3>
                        <p>1. Remover todos os caracteres não alfanuméricos com regex<br>
                        2. Converter tudo para minúsculas</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 REVERSÃO</h3>
                        <p>Criar uma versão invertida da string limpa usando split(), reverse(), join()</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>⚖️ COMPARAÇÃO</h3>
                        <p>A string limpa é igual à sua versão invertida?</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Se iguais → true (é palíndromo)<br>Se diferentes → false (não é palíndromo)</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            Percorre a string uma vez para limpar e uma vez para comparar
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(n)</strong><br>
                            Cria string filtrada e sua reversa
                        </div>
                    </div>
                </div>
            </div>

            <!-- 2. Two Sum -->
            <div id="two-sum" class="flowchart">
                <h2>2. Two Sum</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Recebo um array de números e um target. Preciso encontrar dois números que somam o target.</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 ESTRATÉGIA</h3>
                        <p>Se eu guardar os números já vistos, posso verificar rapidamente se o complemento já apareceu.</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🗂️ ESTRUTURA</h3>
                        <p>Criar um objeto (hash map) para mapear números → índices</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 ITERAÇÃO</h3>
                        <p>Para cada número do array:<br>
                        1. Calcular complemento = target - número atual<br>
                        2. Verificar se complemento já foi visto</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>❓ ENCONTROU?</h3>
                        <p>O complemento está no hash map?</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Se SIM → retornar [índice do complemento, índice atual]<br>
                        Se NÃO → guardar número atual e continuar</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            Percorre o array uma vez, busca no hash map é O(1)
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(n)</strong><br>
                            No pior caso, armazena todos os n números
                        </div>
                    </div>
                </div>
            </div>

            <!-- 3. Palindrome Number -->
            <div id="palindrome-number" class="flowchart">
                <h2>3. Palindrome Number</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Recebo um número inteiro e preciso verificar se é palíndromo</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🚫 VERIFICAÇÃO INICIAL</h3>
                        <p>O número é negativo? Se sim, nunca é palíndromo (por causa do sinal '-')</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 CONVERSÃO</h3>
                        <p>Converter o número para string para facilitar a manipulação</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 REVERSÃO</h3>
                        <p>Criar versão invertida da string usando split(), reverse(), join()</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>⚖️ COMPARAÇÃO</h3>
                        <p>A string original é igual à invertida?</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Se iguais → true (é palíndromo)<br>Se diferentes → false (não é palíndromo)</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(k)</strong><br>
                            k = número de dígitos do número
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(k)</strong><br>
                            Cria string e sua reversa
                        </div>
                    </div>
                </div>
            </div>

            <!-- 4. Missing Number (Soma) -->
            <div id="missing-number-sum" class="flowchart">
                <h2>4. Missing Number (Soma)</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Recebo um array que deveria conter números de 0 a n, mas falta um número</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 INSIGHT</h3>
                        <p>Se eu souber a soma esperada de 0 a n e subtrair a soma real, encontro o número ausente!</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>📐 CÁLCULO ESPERADO</h3>
                        <p>Usar fórmula da soma de PA: soma = n × (n + 1) ÷ 2<br>
                        onde n = tamanho do array</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>➕ SOMA REAL</h3>
                        <p>Somar todos os elementos presentes no array</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>➖ DIFERENÇA</h3>
                        <p>Calcular: soma_esperada - soma_real</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>A diferença é o número que está faltando!</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            Percorre o array uma vez para somar
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Usa apenas variáveis extras
                        </div>
                    </div>
                </div>
            </div>

            <!-- 5. Missing Number (XOR) -->
            <div id="missing-number-xor" class="flowchart">
                <h2>5. Missing Number (XOR)</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Recebo um array que deveria conter números de 0 a n, mas falta um número</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 INSIGHT</h3>
                        <p>Se eu aplicar XOR em todos os números de 0 a n e em seguida XOR em todos os elementos do array, o resultado será o número que falta!</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>⚙️ APLICAÇÃO DO XOR</h3>
                        <p>result = 0<br>
                        Para cada número de 0 a n:<br>
                        - result ^= i<br>
                        Para cada elemento do array:<br>
                        - result ^= num</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Retornar o result, que é o número que falta</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            Percorre o array e a sequência de 0 a n uma vez
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Apenas variáveis auxiliares
                        </div>
                    </div>
                </div>
            </div>

            <!-- 6. Missing Number (Sort) -->
            <div id="missing-number-sort" class="flowchart">
                <h2>6. Missing Number (Sort)</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Recebo um array que deveria conter números de 0 a n, mas falta um número</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>📦 ORDENAÇÃO</h3>
                        <p>Ordenar o array em ordem crescente</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔍 BUSCA PELO NÚMERO FALTANTE</h3>
                        <p>Para i de 0 até array.length:</p>
                        <pre>Se array[i] !== i, então o número i está faltando</pre>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Retornar o número que está faltando</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n log n)</strong><br>
                            Devido à ordenação do array
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Se a ordenação for in-place
                        </div>
                    </div>
                </div>
            </div>

            <!-- 7. Merge Sorted Array -->
            <div id="merge-sorted" class="flowchart">
                <h2>7. Merge Sorted Array</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso juntar dois arrays já ordenados em um só, mantendo a ordem</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 ESTRATÉGIA</h3>
                        <p>Se eu comparar os menores elementos disponíveis de cada array, sempre posso escolher o menor!</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>👆 PONTEIROS</h3>
                        <p>Criar dois ponteiros: um para cada array (i para nums1, j para nums2)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 COMPARAÇÃO</h3>
                        <p>Enquanto ambos têm elementos:<br>
                        - Comparar nums1[i] com nums2[j]<br>
                        - Adicionar o menor ao resultado<br>
                        - Avançar o ponteiro correspondente</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🧹 LIMPEZA</h3>
                        <p>Adicionar elementos restantes de nums1 e nums2 (se houver)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Copiar o resultado de volta para nums1</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(m + n)</strong><br>
                            Percorre todos os elementos de ambos os arrays
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(m + n)</strong><br>
                            Usa array auxiliar para o resultado
                        </div>
                    </div>
                </div>
            </div>

            <!-- 8. Max Consecutive Ones -->
            <div id="max-consecutive" class="flowchart">
                <h2>8. Max Consecutive Ones</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso encontrar o maior número de 1s consecutivos em um array de 0s e 1s</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 ESTRATÉGIA</h3>
                        <p>Vou contar sequências de 1s e sempre guardar a maior sequência vista até agora</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>📊 CONTADORES</h3>
                        <p>currCount = 0 (sequência atual)<br>
                        maxCount = 0 (maior sequência)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 ITERAÇÃO</h3>
                        <p>Para cada elemento do array:<br>
                        - Se for 1: currCount++<br>
                        - Se for 0: atualizar maxCount e zerar currCount</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>❓ FINAL DO ARRAY</h3>
                        <p>E se a maior sequência terminar no último elemento?</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Retornar Math.max(maxCount, currCount) para garantir que não perdemos a última sequência</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            Percorre o array uma vez
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Apenas variáveis extras
                        </div>
                    </div>
                </div>
            </div>

            <!-- 9. Majority Element -->
            <div id="majority-element" class="flowchart">
                <h2>9. Majority Element</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INICIO</h3>
                        <p>Encontrar o elemento que aparece mais da metade das vezes no array</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 INSIGHT</h3>
                        <p>Se um elemento aparece mais da metade das vezes, após ordenar o array, ele SEMPRE estará na posição do meio!</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>📊 ORDENAÇÃO</h3>
                        <p>Ordenar o array em ordem crescente</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🎯 MEIO</h3>
                        <p>Calcular o índice do meio: Math.floor(nums.length / 2)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>O elemento na posição do meio é obrigatoriamente o majoritário!</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n log n)</strong><br>
                            Devido à ordenação do array
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Se ordenação for in-place
                        </div>
                    </div>
                </div>
            </div>

            <!-- 10. Intersection of Arrays -->
            <div id="intersection" class="flowchart">
                <h2>10. Intersection of Two Arrays</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso encontrar elementos que aparecem em ambos os arrays (sem duplicatas)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 ESTRATÉGIA</h3>
                        <p>Se eu guardar elementos do primeiro array em um Set, posso verificar rapidamente se um elemento do segundo está presente</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🗂️ SET</h3>
                        <p>Criar um Set com todos os elementos únicos de nums1</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 VERIFICAÇÃO</h3>
                        <p>Para cada elemento de nums2:<br>
                        - Verificar se está no Set<br>
                        - Se sim: adicionar ao resultado e remover do Set</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>❓ POR QUE REMOVER?</h3>
                        <p>Removemos do Set para evitar duplicatas no resultado!</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Array com elementos comuns, sem duplicatas</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n + m)</strong><br>
                            n = nums1.length, m = nums2.length
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(n)</strong><br>
                            Para armazenar o Set de nums1
                        </div>
                    </div>
                </div>
            </div>

            <!-- 9. First Bad Version -->
            <div id="first-bad-version" class="flowchart">
                <h2>9. First Bad Version</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso encontrar a primeira versão ruim, minimizando chamadas à API isBadVersion</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 INSIGHT</h3>
                        <p>Se uma versão é ruim, todas as seguintes também são. É uma transição ordenada: bom → ruim</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🎯 BUSCA BINÁRIA</h3>
                        <p>Usar ponteiros left = 1, right = n</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 ITERAÇÃO</h3>
                        <p>Enquanto left < right:<br>
                        - mid = (left + right) / 2<br>
                        - Testar isBadVersion(mid)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>❓ É RUIM?</h3>
                        <p>Se isBadVersion(mid) == true:<br>
                        - A primeira versão ruim está em mid ou antes<br>
                        - right = mid<br><br>
                        Se false:<br>
                        - A primeira versão ruim está depois<br>
                        - left = mid + 1</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Quando left == right, encontramos a primeira versão ruim!</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(log n)</strong><br>
                            Busca binária reduz pela metade a cada iteração
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Apenas variáveis auxiliares
                        </div>
                    </div>
                </div>
            </div>

            <!-- 10. Fibonacci -->
            <div id="fibonacci" class="flowchart">
                <h2>10. Fibonacci (Recursivo)</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso calcular o n-ésimo número de Fibonacci: F(n) = F(n-1) + F(n-2)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 DEFINIÇÃO</h3>
                        <p>Fibonacci: cada número é a soma dos dois anteriores<br>
                        F(0) = 0, F(1) = 1, F(2) = 1, F(3) = 2, F(4) = 3...</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🛑 CASO BASE</h3>
                        <p>Se n == 0 ou n == 1:<br>
                        Retornar n (F(0) = 0, F(1) = 1)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 RECURSÃO</h3>
                        <p>Para n > 1:<br>
                        Retornar fib(n-1) + fib(n-2)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>⚠️ PROBLEMA</h3>
                        <p>Muitas recomputações! fib(5) calcula fib(3) várias vezes</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Funciona, mas ineficiente. Alternativa: bottom-up ou memoização</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(2^n)</strong><br>
                            Muitas recomputações recursivas
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(n)</strong><br>
                            Profundidade da pilha de chamadas
                        </div>
                    </div>
                </div>
            </div>

            <!-- 11. Contains Duplicate -->
            <div id="contains-duplicate" class="flowchart">
                <h2>11. Contains Duplicate</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso verificar se existe algum número duplicado no array</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 ESTRATÉGIA</h3>
                        <p>Se eu guardar os números já vistos, posso verificar rapidamente se já vi o número atual</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🗂️ SET</h3>
                        <p>Criar um Set vazio para armazenar números já vistos</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 ITERAÇÃO</h3>
                        <p>Para cada número do array:<br>
                        1. Verificar se já está no Set<br>
                        2. Se sim → encontrou duplicado!<br>
                        3. Se não → adicionar ao Set</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>❓ ENCONTROU?</h3>
                        <p>Se encontrou duplicado → return true<br>
                        Se não encontrou → continuar</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Se terminou o loop sem encontrar → return false</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            Percorre o array uma vez, Set.has() é O(1)
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(n)</strong><br>
                            No pior caso, todos elementos únicos
                        </div>
                    </div>
                </div>
            </div>

            <!-- 12. Climbing Stairs -->
            <div id="climbing-stairs" class="flowchart">
                <h2>12. Climbing Stairs</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso contar quantas maneiras existem de subir n degraus (1 ou 2 por vez)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 INSIGHT</h3>
                        <p>Para chegar ao degrau n, posso vir do degrau n-1 (subindo 1) ou do n-2 (subindo 2)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>📐 FÓRMULA</h3>
                        <p>ways(n) = ways(n-1) + ways(n-2)<br>
                        É como Fibonacci!</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🛑 CASOS BASE</h3>
                        <p>n = 1 → 1 maneira<br>
                        n = 2 → 2 maneiras (1+1 ou 2)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 BOTTOM-UP</h3>
                        <p>Para n ≥ 3:<br>
                        - oneStepBefore = 2 (ways para n-1)<br>
                        - twoStepsBefore = 1 (ways para n-2)<br>
                        - Calcular ways = oneStepBefore + twoStepsBefore</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Retornar o número total de maneiras calculado</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            Percorre de 3 até n uma vez
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Apenas variáveis extras
                        </div>
                    </div>
                </div>
            </div>

            <!-- 13. Binary Search -->
            <div id="binary-search" class="flowchart">
                <h2>13. Binary Search</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso encontrar rapidamente um elemento em um array ordenado</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 VANTAGEM</h3>
                        <p>Array está ordenado! Posso descartar metade dos elementos a cada comparação</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>👆 PONTEIROS</h3>
                        <p>left = 0 (início do array)<br>
                        right = nums.length - 1 (fim do array)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 ITERAÇÃO</h3>
                        <p>Enquanto left ≤ right:<br>
                        1. mid = (left + right) / 2<br>
                        2. Comparar nums[mid] com target</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>❓ COMPARAÇÃO</h3>
                        <p>Se nums[mid] == target → encontrou!<br>
                        Se nums[mid] < target → left = mid + 1<br>
                        Se nums[mid] > target → right = mid - 1</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Se encontrou → retornar índice<br>
                        Se não encontrou → retornar -1</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(log n)</strong><br>
                            Descarta metade a cada iteração
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Apenas variáveis auxiliares
                        </div>
                    </div>
                </div>
            </div>

            <!-- 14. Stock Profit -->
            <div id="stock-profit" class="flowchart">
                <h2>14. Best Time to Buy and Sell Stock</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso calcular o lucro máximo comprando e vendendo uma ação (comprar antes de vender)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 ESTRATÉGIA</h3>
                        <p>Quero comprar no menor preço possível e vender no maior preço DEPOIS disso</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>📊 VARIÁVEIS</h3>
                        <p>minPrice = Infinity (menor preço visto)<br>
                        maxProfit = 0 (maior lucro possível)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔄 ITERAÇÃO</h3>
                        <p>Para cada preço no array:<br>
                        1. Atualizar minPrice se preço atual for menor<br>
                        2. Calcular lucro se vendesse hoje<br>
                        3. Atualizar maxProfit se lucro for maior</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>💡 LÓGICA</h3>
                        <p>A cada dia, pergunto:<br>
                        "Esse é o melhor dia para comprar?" ou<br>
                        "Esse é o melhor dia para vender?"</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Retornar o maxProfit calculado</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            Percorre o array uma vez
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Apenas variáveis extras
                        </div>
                    </div>
                </div>
            </div>

            <!-- 15. Average Salary -->
            <div id="average-salary" class="flowchart">
                <h2>15. Average Salary Excluding Min and Max</h2>
                <div class="flow-container">
                    <div class="flow-step start">
                        <h3>🎯 INÍCIO</h3>
                        <p>Preciso calcular a média salarial excluindo o menor e o maior salário</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step decision">
                        <h3>🤔 ESTRATÉGIA</h3>
                        <p>Vou encontrar min e max, somar todos os salários, subtrair min e max, e dividir pelo restante</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>🔍 ENCONTRAR MIN/MAX</h3>
                        <p>minSalary = Math.min(...salary)<br>
                        maxSalary = Math.max(...salary)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>➕ SOMA TOTAL</h3>
                        <p>totalSum = salary.reduce((acc, val) => acc + val, 0)</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>➖ EXCLUIR MIN/MAX</h3>
                        <p>sumWithoutMinMax = totalSum - minSalary - maxSalary</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step process">
                        <h3>➗ CALCULAR MÉDIA</h3>
                        <p>count = salary.length - 2<br>
                        average = sumWithoutMinMax / count</p>
                    </div>
                    <div class="arrow"></div>
                    <div class="flow-step end">
                        <h3>✅ RESULTADO</h3>
                        <p>Retornar a média calculada</p>
                    </div>
                </div>
                <div class="complexity">
                    <h3>📊 Análise de Complexidade</h3>
                    <div class="complexity-grid">
                        <div class="complexity-item">
                            <strong>Tempo: O(n)</strong><br>
                            min, max e reduce percorrem o array
                        </div>
                        <div class="complexity-item">
                            <strong>Espaço: O(1)</strong><br>
                            Apenas variáveis extras
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>

    <script>
        function showFlowchart(id) {
            // Esconder todos os fluxogramas
            const flowcharts = document.querySelectorAll('.flowchart');
            flowcharts.forEach(chart => chart.classList.remove('active'));
            
            // Mostrar o fluxograma selecionado
            document.getElementById(id).classList.add('active');
            
            // Atualizar botões de navegação
            const buttons = document.querySelectorAll('.nav-btn');
            buttons.forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            // Scroll suave para o topo do conteúdo
            document.querySelector('.content').scrollIntoView({ 
                behavior: 'smooth',
                block: 'start'
            });
        }
    </script>
</body>
</html>